1. TO ADD SECRETS (ENV. VARIABLES, ext.) TO CODEPSACE:
Githab>Settings(right side pane)>Codenames(left side pane)>Click "New secret" under Secrets section

2. TO VIEW DYNAMIC CODEPSACE API list:
navigate https://api.github.com/meta to view object with key: "codespaces"

3. HOW TO ADD NON-BREAKING SPACE IN JAVASCRIPT createTextNode() method
You can use the escape sequence '\u' in a string with the Unicode value for a non-breaking space:
var textNode = document.createTextNode("\u00a0");
&amp;nbsp; and &amp;#160; are strictly HTML (or XML) notations. In JavaScript, you need to use an escape sequence starting with '\\' for special characters in strings.


4. HOW TO FIND MULTIPLE DOCS IN MONGOOSE MONGODB COLLECTIONS
    // Calibration.find().where('procedureName').in(calibrationNames).exec()
    // .then(cals => {        
    //     if(cals.length > 0){
    //         for (let i = 0; i < cals.length; i++) {
    //             const calProcedure = new calibrationProcedure(
    //                 cals[i]._id, 
    //                 calibrationNames[i],
    //                 lastCalibrationDate, 
    //                 dueCalibrationDate,
    //                 calibrationExtended,
    //                 maxCalibrationExtension,
    //                 calibrationRangePercent
    //             );           
    //             cals[i].sensors.push(sensor._id);
    //             sensor.calibrations.push(calProcedure);                                
    //         }
    //         const saveCals = cals.map(cal => cal.save());
    //         Promise.all(saveCals)
    //         .then(() => {
    //             sensor.save().then(result => {
    //                 res.status(201).json({
    //                     message: `SUCCESS: Sensor was save and calibrations procedures were updated per sensor references...`,   
    //                     sensor: result,
    //                     request: {
    //                         type: 'POST',
    //                         url: req.originalUrl                    
    //                     }   
    //                 });
    //             });  
    //         })
    //         .catch(() => {
    //             res.status(500).json({
    //                 calibrations,
    //                 error: "Internal Server Error: Sensor references were not saved to calibration documents",
    //                 request: {
    //                     type: 'POST',
    //                     url: req.originalUrl                    
    //                 }
    //             });
    //         })     
    //     } else {
    //         console.log(`Calibration procedures ${calibrationNames} were not found`);
    //         res.status(400).json({
    //             calibrationNames,
    //             cals,
    //             error: `Failed to find specified calibration procedures for this sensor...`,               
    //             request: {
    //                 type: 'POST',
    //                 url: req.originalUrl                    
    //             }  
    //         });
    //     }
    // })
    // .catch(() => {
    //     res.status(500).json({
    //         error: "Internal Server Error: Sensor was not saved to database",
    //         request: {
    //             type: 'POST',
    //             url: req.originalUrl                    
    //         }
    //     });
    // })


    5. HOW TO SEQUENCE TWO AXIOS REQUESTS 
     
    //axios.patch(`../api/calibrations/${id}`, calPatchRequestData
    //  ).then(response) => {
    //      console.log(response);
    //       return axios.get(`../api/calibrations/${id}`
    //    ).then((result) => {
    //      console.log(result);        
    //    })
    //   .catch((error) => {
    //     console.log("ERROR", error);
    //  })
    //  }

    6. HOW TO SEARCH IN ENTIRE VISUAL STUDIO CODE
    
    //VS Code allows you to quickly search over all files in the currently opened folder. 
    //Press Ctrl+Shift+F and enter your search term.


	7. HOW TO CHANGE ALL occurrences in VS CODE file
	// use Ctrl+shift+L in Visual Studio Code to select all occurrences of word in local page!


	/// API endpoint: delete a single sensor by MongoDB id
/// this client reques MUST HAVE the following body! 
//{
//    "calibrations":[
//      '4ed3ede8844f0f351100000c',
//      '4ed3ede8844f0f351100000a',
//      '4ed3ede8844f0f351100000d,
//       ......
//       ......
//    ],
//    "description": "Load Cell Transducer",
//    "EID": "EIDXXX"      
///////////////EXAMPLE: /////////////////////////////////////////
//const ids =  [
//    '4ed3ede8844f0f351100000c',
//    '4ed3f117a844e0471100000d', 
//   '4ed3f18132f50c491100000e',
//];
//}   Model.find().where('_id').in(ids).exec((err, records) => {});

router.delete('/:sensorId', (req, res, next) => {
//     const id = req.params.sensorId;
//     Sensor.deleteOne({_id: id})
//         .exec()
//         .then(doc => {
//             if(doc.deletedCount === 1){

//                 //If a sensor document was found, then find associated calibration procedure(s) by specified id's
//                 //in req.body.calibrations array and remove sensor ID from all FOUND cals.sensor[i] arrays
//                 //NOTE: could be multiple calibrations found!
//                 Calibration.find().where('_id').in(req.body.calibrations).exec()
//                 .then(cals => { 
//                     for (let i = 0; i < cals.length; i++) {
//                         for (let j = 0; j < cals[i].sensors.length; j++) {
//                             if (cals[i].sensors[j].toString() === id) {
//                                 cals[i].sensors.splice(j, 1);   //use splice() method to mutate existing arrays in cal documents
//                                 break;
//                             }
//                         }                                
//                     }
//                     const saveCals = cals.map(cal => cal.save());
//                     //resolves all async promises
//                     Promise.all(saveCals)
//                     .then(() => {                        
//                         res.status(200).json({
//                             message: `SUCCESS! Sensor ${req.body.description} ${req.body.EID} was deleted from calibration procedure`,
//                             deletedSensor: {
//                                 id: req.params.sensorId,
//                                 EID: req.body.EID,
//                                 description: req.body.description
//                             }, 
//                             deletedCount: doc.deletedCount,                   
//                             request: {
//                                 type: 'DELETE',
//                                 url: req.originalUrl                    
//                             }    
//                         });                           
//                     }).catch(err => {
//                         throw new Error(err);
//                     })
//                 }).catch(() => {
//                     res.status(500).json({
//                         error: "Internal Server Error: Sensor was not deleted...",
//                         request: {
//                             type: 'DELETE',
//                             url: req.originalUrl                    
//                         }    
//                     });
//                 });
//             }else{
//                 res.status(400).json({
//                     error: `Error: Hint: the sensor ${req.body.EID} id {${id}} is valid, but seems like not found in the database.`,
//                     request: {
//                         type: 'DELETE',
//                         url: req.originalUrl                    
//                     }    
//                 })
//             }

//         }).catch(()=>{                
//             res.status(400).json({
//                 error: `Failed to delete sensor ${req.body.EID} with id {${id}}. (Hint: the sensor ${req.body.EID} id {${id}} format is INVALID; thus, not found in the database...)`,  
//                 request: {
//                     type: 'DELETE',
//                     url: req.originalUrl                    
//                 }                      
//             });
//         });
//     })